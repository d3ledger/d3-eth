/*
 * Copyright Soramitsu Co., Ltd. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

dependencies {
    implementation "com.github.soramitsu.soranet-validator:notary-commons:$notary_version"

    // Eth library
    api "org.web3j:core:$web3j_version"
    // couldn't do it with web3j structures
    implementation("org.ethereum:ethereumj-core:1.12.0-RELEASE") {
        exclude group: 'io.netty', module: 'netty-all'
    }

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Chain adapter
    implementation "com.github.soramitsu.chain-adapter:chain-adapter-client:$chain_adapter_client_version"

    implementation "com.github.soramitsu.soranet-validator:notifications-model:$notary_version"
}


apply plugin: 'kotlin'

/*
 * Call master contract method isPeer()
 */
task runCallMasterIsPeer(type: JavaExec) {
    main = 'jp.co.soramitsu.soranet.eth.util.CallMasterIsPeer'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

/*
 * Call master contract method withdraw()
 */
task runCallMasterWithdrawToWallet(type: JavaExec) {
    main = 'jp.co.soramitsu.soranet.eth.util.CallMasterWithdrawToWallet'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

/*
 * Send Ether from contract with internal transaction
 * Example:
 * ./gradlew runSendEtherFromContract --args="0x4a59b6031e42f77df0554d253bd63cbf9113ea30 0.00000001"
 */
task runSendEtherFromContract(type: JavaExec) {
    main = 'jp.co.soramitsu.soranet.eth.deploy.TransferEthereumFromContract'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

// Deploy ethereum smart contracts - RelayRegistry, Master, add notaries wallets to Master and lock Master.
task runPreDeployEthereum(type: JavaExec) {
    main = 'jp.co.soramitsu.soranet.eth.deploy.EthPreDeployMain'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

test {
    // Enable JUnit5 tests
    useJUnitPlatform() {
    }
}
