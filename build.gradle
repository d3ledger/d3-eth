/*
 * Copyright Soramitsu Co., Ltd. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

buildscript {
    ext.kotlin_version = '1.3.61'
    ext.ktor_version = '1.0.0'
    ext.notary_version = '299ce7f44dd77915b1cedaec3ba9b2f6f78af59b'
    ext.chain_adapter_client_version = '9e65b4e38dd82d9a2ddc1065326050d4dc296075'
    ext.web3j_version = '4.4.1'

    repositories {
        mavenCentral()
        jcenter()
        // gradle plugins repository
        gradlePluginPortal()
    }
    configurations.maybeCreate("pitest")
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
    }
}

plugins {
    id "org.sonarqube" version "2.7.1"
    id "com.github.dolgopolovwork.testreport" version "1"
}

group = 'soranet'
version = '1.0-SNAPSHOT'


apply plugin: 'com.github.johnrengelman.shadow'

testReport {
    testFolders = Arrays.asList("notary-eth-integration-test")
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'maven'
    repositories {
        mavenCentral()
        // for Ktor
        jcenter()
        maven { url = 'https://dl.bintray.com/kotlin/ktor' }
        maven { url 'https://jitpack.io' }
        maven { url "https://dl.bintray.com/ethereum/maven/" }
    }
}

allprojects {
    sonarqube {
        properties {
            property "sonar.github.repository", "soramitsu/soranet-eth"
            property "sonar.projectKey", "soranet:soranet-eth"
            property "sonar.java.binaries", "${project.projectDir}/build/classes"
            property "sonar.java.libraries", "${project.projectDir}/build/libs"
            property "sonar.java.test.binaries", "${project.projectDir}/build/test-results/test/binary"
            property "sonar.exclusions", "notary-eth-integration-test/**, **/java/contract/**"
        }
    }
}

sourceCompatibility = 1.8

// ------------------| Test dependencies |------------------

allprojects {
    dependencies {
        // unit tests
        testImplementation('org.junit.jupiter:junit-jupiter-api:5.2.0')
        testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')

        testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.3.3'
        testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0")
        // for setting env variables in tests
        testImplementation('com.github.stefanbirkner:system-rules:1.18.0') {
            exclude group: 'junit'
        }
        // to run both junit4 and junit5 tests
        testRuntime("org.junit.vintage:junit-vintage-engine:5.2.0")
    }
}

wrapper {
    gradleVersion = 4.10
}


allprojects {
    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
}

task buildEthereumContracts(type: Exec) {
    description = 'Build Ethereum contracts'

    String contract_path = projectDir.toString().concat("/deploy/ethereum/contract")
    String bin_path = contract_path.concat("/bin")
    file(bin_path).mkdirs()

    doLast {
        logger.info(standardOutput.toString())
        logger.error(errorOutput.toString())
    }

    commandLine 'sh', '-c', 'solc <path>/*.sol --bin --abi --optimize -o <path>/bin --overwrite'.replace("<path>", contract_path)

}

task buildEthereumContractsBindings(type: Exec) {

    String contract_path = projectDir.toString().concat("/deploy/ethereum/contract")
    String bin_path = contract_path.concat("/bin")
    String wildcard = "<path>/*.bin".replace("<path>", bin_path)
    String cmd = 'for f in ' + wildcard + '; ' +
            'do ' +
            'name=$(echo "$f" | cut -f 1 -d \'.\'); ' +
            'web3j solidity generate -b ${name}.bin --abiFile=${name}.abi -o <bin_path> -p contract \n'.replace("<bin_path>", bin_path) +
            'done \n' +
            'cp deploy/ethereum/contract/bin/contract/* eth/src/main/java/contract'

    commandLine 'bash', '-c', cmd
}

buildEthereumContractsBindings.dependsOn ':buildEthereumContracts'

//Forms a list of ETH passwords from command line arguments
def getEthPasswordsArgs() {
    List<String> args = new ArrayList<>()
    if (project.hasProperty("credentialsPassword")) {
        args.add(project.property("credentialsPassword").toString())
    }
    if (project.hasProperty("nodeLogin")) {
        args.add(project.property("nodeLogin").toString())
    }
    if (project.hasProperty("nodePassword")) {
        args.add(project.property("nodePassword").toString())
    }
    return args
}

