dependencies {
    implementation "com.github.d3ledger.notary:notary-commons:$notary_version"

    // Eth library
    implementation "org.web3j:core:$web3j_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Chain adapter
    implementation "com.github.soramitsu.chain-adapter:chain-adapter-client:$chain_adapter_client_version"
}


apply plugin: 'kotlin'

/*
 * Call master contract method isPeer()
 */
task runCallMasterIsPeer(type: JavaExec) {
    main = 'com.d3.eth.util.CallMasterIsPeer'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

/*
 * Call master contract method withdraw()
 */
task runCallMasterWithdrawToWallet(type: JavaExec) {
    main = 'com.d3.eth.util.CallMasterWithdrawToWallet'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

/*
 * Send Ether from contract with internal transaction
 * Example:
 * ./gradlew runSendEtherFromContract --args="0x4a59b6031e42f77df0554d253bd63cbf9113ea30 0.00000001"
 */
task runSendEtherFromContract(type: JavaExec) {
    main = 'com.d3.eth.deploy.TransferEthereumFromContract'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

// Deploy ethereum smart contracts - RelayRegistry, Master, add notaries wallets to Master and lock Master.
task runPreDeployEthereum(type: JavaExec) {
    main = 'com.d3.eth.deploy.EthPreDeployMain'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}
