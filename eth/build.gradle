dependencies {
    compile "com.github.d3ledger.notary:notary-commons:$notary_version"

    // Eth library
    compile 'org.web3j:core:4.2.0'

    // Waves library
    compile 'com.wavesplatform:wavesj:0.4'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}


apply plugin: 'application'
apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'
mainClassName = "com.d3.eth.deposit.EthDepositMain"

task runSendEther(type: JavaExec) {
    main = 'com.d3.eth.deploy.EthSendEther'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

/*
 * Send Ether from contract with internal transaction
 * Example:
 * ./gradlew runSendEtherFromContract --args="0x4a59b6031e42f77df0554d253bd63cbf9113ea30 0.00000001"
 */
task runSendEtherFromContract(type: JavaExec) {
    main = 'com.d3.eth.deploy.TransferEthereumFromContract'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

// Deploy ethereum smart contracts - RelayRegistry, Master, add notaries wallets to Master and lock Master.
task runPreDeployEthereum(type: JavaExec) {
    main = 'com.d3.eth.deploy.EthPreDeployMain'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

task runEthDeposit(type: JavaExec) {
    main = 'com.d3.eth.deposit.EthDepositMain'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}
