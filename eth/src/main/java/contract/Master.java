package contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class Master extends Contract {
    private static final String BINARY = "60806040523480156200001157600080fd5b50604051620036fb380380620036fb833981018060405260408110156200003757600080fd5b8151602083018051919392830192916401000000008111156200005957600080fd5b820160208101848111156200006d57600080fd5b81518560208202830111640100000000821117156200008b57600080fd5b5050929190505050620000a6338383620000ae60201b60201c565b505062000253565b60005460ff1615620000bf57600080fd5b600080546001600160a01b0380861661010002610100600160a81b0319909216919091178255600580548583166001600160a01b0319918216179182905560068054909116919092161790555b81518160ff1610156200014b5762000141828260ff16815181106200012d57fe5b6020026020010151620001eb60201b60201c565b506001016200010c565b506040516200015a9062000245565b604051809103906000f08015801562000177573d6000803e3d6000fd5b50600780546001600160a01b039283166001600160a01b03199182161791829055600880546001818101835560009283527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3909101805490931693909416929092179055805460ff19169091179055505050565b6001600160a01b03811660009081526001602052604081205460ff16156200021257600080fd5b506001600160a01b03166000908152600160208190526040909120805460ff191682179055600280549091019081905590565b610dc7806200293483390190565b6126d180620002636000396000f3fe608060405260043610620001225760003560e01c80639f1a156c11620000a3578063ca70cf6e116200006d578063ca70cf6e14620007ba578063d48bfca7146200098e578063e766307914620009c5578063e991232b14620009dd578063eea29e3e14620009f55762000122565b80639f1a156c14620006c1578063aa6ca80814620006f8578063ae6664e01462000762578063b07c411f146200078c5762000122565b80634f64b2be11620000f15780634f64b2be14620003c1578063658afed414620003ef57806377a24f36146200040757806389c39baf14620004d55780638f32d59b14620006a95762000122565b806301f62bd714620001305780631b042ef9146200030b5780631c8590ba146200033f5780631d345ebb146200038a575b36156200012e57600080fd5b005b3480156200013d57600080fd5b506200012e600480360360c08110156200015657600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b8111156200018d57600080fd5b820183602082011115620001a057600080fd5b803590602001918460208302840111600160201b83111715620001c257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200021257600080fd5b8201836020820111156200022557600080fd5b803590602001918460208302840111600160201b831117156200024757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200029757600080fd5b820183602082011115620002aa57600080fd5b803590602001918460208302840111600160201b83111715620002cc57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062000be6945050505050565b3480156200031857600080fd5b506200032362000d0e565b604080516001600160a01b039092168252519081900360200190f35b3480156200034c57600080fd5b5062000376600480360360208110156200036557600080fd5b50356001600160a01b031662000d1d565b604080519115158252519081900360200190f35b3480156200039757600080fd5b506200037660048036036020811015620003b057600080fd5b50356001600160a01b031662000d32565b348015620003ce57600080fd5b506200032360048036036020811015620003e757600080fd5b503562000d47565b348015620003fc57600080fd5b506200032362000d6f565b3480156200041457600080fd5b506200012e600480360360608110156200042d57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156200046157600080fd5b8201836020820111156200047457600080fd5b803590602001918460208302840111600160201b831117156200049657600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062000d7e945050505050565b348015620004e257600080fd5b5062000376600480360360a0811015620004fb57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156200052b57600080fd5b8201836020820111156200053e57600080fd5b803590602001918460208302840111600160201b831117156200056057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115620005b057600080fd5b820183602082011115620005c357600080fd5b803590602001918460208302840111600160201b83111715620005e557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200063557600080fd5b8201836020820111156200064857600080fd5b803590602001918460208302840111600160201b831117156200066a57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062000eb5945050505050565b348015620006b657600080fd5b506200037662000f5e565b348015620006ce57600080fd5b506200037660048036036020811015620006e757600080fd5b50356001600160a01b031662000f74565b3480156200070557600080fd5b506200071062000fed565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156200074e57818101518382015260200162000734565b505050509050019250505060405180910390f35b3480156200076f57600080fd5b506200077a62001051565b60408051918252519081900360200190f35b3480156200079957600080fd5b506200037660048036036020811015620007b257600080fd5b503562001057565b348015620007c757600080fd5b5062000376600480360360a0811015620007e057600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156200081057600080fd5b8201836020820111156200082357600080fd5b803590602001918460208302840111600160201b831117156200084557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200089557600080fd5b820183602082011115620008a857600080fd5b803590602001918460208302840111600160201b83111715620008ca57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200091a57600080fd5b8201836020820111156200092d57600080fd5b803590602001918460208302840111600160201b831117156200094f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506200106c945050505050565b3480156200099b57600080fd5b506200012e60048036036020811015620009b457600080fd5b50356001600160a01b031662001116565b348015620009d257600080fd5b5062000323620011cd565b348015620009ea57600080fd5b5062000323620011e1565b34801562000a0257600080fd5b506200012e600480360361010081101562000a1c57600080fd5b6001600160a01b0382358116926020810135926040820135909216916060820135919081019060a081016080820135600160201b81111562000a5d57600080fd5b82018360208201111562000a7057600080fd5b803590602001918460208302840111600160201b8311171562000a9257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000ae257600080fd5b82018360208201111562000af557600080fd5b803590602001918460208302840111600160201b8311171562000b1757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000b6757600080fd5b82018360208201111562000b7a57600080fd5b803590602001918460208302840111600160201b8311171562000b9c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b03169150620011f09050565b6007546001600160a01b031662000bfc57600080fd5b60008481526003602052604090205460ff161562000c1957600080fd5b62000c7286868660405160200180846001600160a01b03166001600160a01b031660601b815260140183815260200182815260200193505050506040516020818303038152906040528051906020012084848462001553565b62000c7c57600080fd5b60075460408051600160e21b633c3769970281526001600160a01b038981166004830152602482018990529151919092169163f0dda65c91604480830192600092919082900301818387803b15801562000cd557600080fd5b505af115801562000cea573d6000803e3d6000fd5b505050600094855250506003602052505060409020805460ff191660011790555050565b6007546001600160a01b031681565b60016020526000908152604090205460ff1681565b60046020526000908152604090205460ff1681565b6008818154811062000d5557fe5b6000918252602090912001546001600160a01b0316905081565b6005546001600160a01b031681565b60005460ff161562000d8f57600080fd5b600080546001600160a01b0380861661010002610100600160a81b0319909216919091178255600580548583166001600160a01b0319918216179182905560068054909116919092161790555b81518160ff16101562000e155762000e0b828260ff168151811062000dfd57fe5b602002602001015162001755565b5060010162000ddc565b5060405162000e2490620018d0565b604051809103906000f08015801562000e41573d6000803e3d6000fd5b50600780546001600160a01b039283166001600160a01b03199182161791829055600880546001818101835560009283527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3909101805490931693909416929092179055805460ff19169091179055505050565b60008481526003602052604081205460ff161562000ed257600080fd5b62000f23868660405160200180836001600160a01b03166001600160a01b031660601b8152601401828152602001925050506040516020818303038152906040528051906020012085858562001553565b62000f2d57600080fd5b62000f3886620017af565b506000848152600360205260409020805460ff1916600190811790915595945050505050565b60005461010090046001600160a01b0316331490565b60006001600160a01b03821662000f8e5750600162000fe8565b6000805b60085481101562000fe457836001600160a01b03166008828154811062000fb557fe5b6000918252602090912001546001600160a01b0316141562000fdb576001915062000fe4565b60010162000f92565b5090505b919050565b606060088054806020026020016040519081016040528092919081815260200182805480156200104757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001028575b5050505050905090565b60025481565b60036020526000908152604090205460ff1681565b60008481526003602052604081205460ff16156200108957600080fd5b620010da868660405160200180836001600160a01b03166001600160a01b031660601b8152601401828152602001925050506040516020818303038152906040528051906020012085858562001553565b620010e457600080fd5b620010ef8662001755565b50506000848152600360205260409020805460ff1916600190811790915595945050505050565b6200112062000f5e565b6200112a57600080fd5b60005b6008548110156200117a57816001600160a01b0316600882815481106200115057fe5b6000918252602090912001546001600160a01b031614156200117157600080fd5b6001016200112d565b50600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0392909216919091179055565b60005461010090046001600160a01b031681565b6006546001600160a01b031681565b620011fb8862000f74565b6200120557600080fd5b60065460408051600160e01b63a10cda990281526001600160a01b03848116600483015289811660248301529151919092169163a10cda99916044808301926020929190829003018186803b1580156200125e57600080fd5b505afa15801562001273573d6000803e3d6000fd5b505050506040513d60208110156200128a57600080fd5b50516200129657600080fd5b60008581526003602052604090205460ff1615620012b357600080fd5b604080516001600160a01b03808b16606090811b602080850191909152603484018c9052828b16821b6054850152606884018a9052918516901b60888301528251607c818403018152609c9092019092528051910120620013179085858562001553565b6200132157600080fd5b6001600160a01b038816620013da5730318711156200138557604080516001600160a01b03808b1682528816602082015281517f33d1e0301846de1496df73b1da3d17c85b7266dd832d21e10ff21a1f143ef293929181900390910190a1620013d4565b600085815260036020526040808220805460ff19166001179055516001600160a01b0388169189156108fc02918a91818181858888f19350505050158015620013d2573d6000803e3d6000fd5b505b62001549565b60408051600160e01b6370a082310281523060048201529051899189916001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156200142857600080fd5b505afa1580156200143d573d6000803e3d6000fd5b505050506040513d60208110156200145457600080fd5b50511015620014a857604080516001600160a01b03808c1682528916602082015281517f33d1e0301846de1496df73b1da3d17c85b7266dd832d21e10ff21a1f143ef293929181900390910190a162001547565b6000868152600360209081526040808320805460ff191660011790558051600160e01b63a9059cbb0281526001600160a01b038b81166004830152602482018d905291519185169363a9059cbb9360448084019491939192918390030190829087803b1580156200151857600080fd5b505af11580156200152d573d6000803e3d6000fd5b505050506040513d60208110156200154457600080fd5b50505b505b5050505050505050565b6000600160025410156200156657600080fd5b82518451146200157557600080fd5b81518351146200158457600080fd5b60006003600160025403816200159657fe5b046002540390508083511015620015ac57600080fd5b600080905060608451604051908082528060200260200182016040528015620015df578160200160208202803883390190505b50905060005b8551811015620016ed5760006200163b8a8a84815181106200160357fe5b60200260200101518a85815181106200161857fe5b60200260200101518a86815181106200162d57fe5b602002602001015162001806565b6001600160a01b03811660009081526001602081905260409091205491925060ff90911615151415806200168c57506001600160a01b03811660009081526004602052604090205460ff1615156001145b15620016995750620016e4565b80838581518110620016a757fe5b6001600160a01b0392831660209182029290920181019190915291166000908152600490915260409020805460ff19166001908117909155909201915b600101620015e5565b5060005b8281101562001748576000600460008484815181106200170d57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101620016f1565b5050101595945050505050565b6001600160a01b03811660009081526001602052604081205460ff16156200177c57600080fd5b506001600160a01b03166000908152600160208190526040909120805460ff191682179055600280549091019081905590565b6001600160a01b03811660009081526001602081905260409091205460ff16151514620017db57600080fd5b6001600160a01b03166000908152600160205260409020805460ff1916905560028054600019019055565b6000808560405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050600060018287878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015620018ba573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b610dc780620018df8339019056fe60806040523480156200001157600080fd5b506040518060400160405280600a81526020017f536f726120546f6b656e000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f584f52000000000000000000000000000000000000000000000000000000000081525060128260039080519060200190620000989291906200020c565b508151620000ae9060049060208501906200020c565b506005805460ff191660ff9290921691909117610100600160a81b03191661010033810291909117918290556040516001600160a01b0391909204169250600091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a362000133336b053a680649b3e32378b13f526200013960201b60201c565b620002b1565b6001600160a01b0382166200014d57600080fd5b6200016981600254620001f260201b620008b31790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200019c918390620008b3620001f2821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000828201838110156200020557600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024f57805160ff19168380011785556200027f565b828001600101855582156200027f579182015b828111156200027f57825182559160200191906001019062000262565b506200028d92915062000291565b5090565b620002ae91905b808211156200028d576000815560010162000298565b90565b610b0680620002c16000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063715018a6116100ad578063a457c2d711610071578063a457c2d714610332578063a9059cbb1461035e578063dd62ed3e1461038a578063f0dda65c146103b8578063f2fde38b146103e457610121565b8063715018a6146102ca57806379cc6790146102d25780638da5cb5b146102fe5780638f32d59b1461032257806395d89b411461032a57610121565b80632ff2e9dc116100f45780632ff2e9dc14610233578063313ce5671461023b578063395093511461025957806342966c681461028557806370a08231146102a457610121565b806306fdde0314610126578063095ea7b3146101a357806318160ddd146101e357806323b872dd146101fd575b600080fd5b61012e61040a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610168578181015183820152602001610150565b50505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101cf600480360360408110156101b957600080fd5b506001600160a01b0381351690602001356104a0565b604080519115158252519081900360200190f35b6101eb6104b6565b60408051918252519081900360200190f35b6101cf6004803603606081101561021357600080fd5b506001600160a01b038135811691602081013590911690604001356104bc565b6101eb610513565b610243610523565b6040805160ff9092168252519081900360200190f35b6101cf6004803603604081101561026f57600080fd5b506001600160a01b03813516906020013561052c565b6102a26004803603602081101561029b57600080fd5b5035610568565b005b6101eb600480360360208110156102ba57600080fd5b50356001600160a01b0316610575565b6102a2610590565b6102a2600480360360408110156102e857600080fd5b506001600160a01b0381351690602001356105f1565b6103066105ff565b604080516001600160a01b039092168252519081900360200190f35b6101cf610613565b61012e610629565b6101cf6004803603604081101561034857600080fd5b506001600160a01b03813516906020013561068a565b6101cf6004803603604081101561037457600080fd5b506001600160a01b0381351690602001356106c6565b6101eb600480360360408110156103a057600080fd5b506001600160a01b03813581169160200135166106d3565b6102a2600480360360408110156103ce57600080fd5b506001600160a01b0381351690602001356106fe565b6102a2600480360360208110156103fa57600080fd5b50356001600160a01b0316610731565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104965780601f1061046b57610100808354040283529160200191610496565b820191906000526020600020905b81548152906001019060200180831161047957829003601f168201915b5050505050905090565b60006104ad33848461074b565b50600192915050565b60025490565b60006104c98484846107d3565b6001600160a01b038416600090815260016020908152604080832033808552925290912054610509918691610504908663ffffffff61089e16565b61074b565b5060019392505050565b6b053a680649b3e32378b13f5281565b60055460ff1690565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ad918590610504908663ffffffff6108b316565b61057233826108cc565b50565b6001600160a01b031660009081526020819052604090205490565b610598610613565b6105a157600080fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b6105fb8282610973565b5050565b60055461010090046001600160a01b031690565b60055461010090046001600160a01b0316331490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104965780601f1061046b57610100808354040283529160200191610496565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ad918590610504908663ffffffff61089e16565b60006104ad3384846107d3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610706610613565b61070f57600080fd5b6b053a680649b3e32378b13f52811061072757600080fd5b6105fb82826109b8565b610739610613565b61074257600080fd5b61057281610a60565b6001600160a01b03821661075e57600080fd5b6001600160a01b03831661077157600080fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0382166107e657600080fd5b6001600160a01b03831660009081526020819052604090205461080f908263ffffffff61089e16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610844908263ffffffff6108b316565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828211156108ad57600080fd5b50900390565b6000828201838110156108c557600080fd5b9392505050565b6001600160a01b0382166108df57600080fd5b6002546108f2908263ffffffff61089e16565b6002556001600160a01b03821660009081526020819052604090205461091e908263ffffffff61089e16565b6001600160a01b038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b61097d82826108cc565b6001600160a01b0382166000908152600160209081526040808320338085529252909120546105fb918491610504908563ffffffff61089e16565b6001600160a01b0382166109cb57600080fd5b6002546109de908263ffffffff6108b316565b6002556001600160a01b038216600090815260208190526040902054610a0a908263ffffffff6108b316565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038116610a7357600080fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b031990921691909117905556fea165627a7a723058201690e2d38144f22d5ef41f6df7c31d8a9f0e3d405b358475390221f5547d93010029a165627a7a72305820150553ac436347a88e23dba6d01f90081df9208a1309dd56b8fb4a5d85128740002960806040523480156200001157600080fd5b506040518060400160405280600a81526020017f536f726120546f6b656e000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f584f52000000000000000000000000000000000000000000000000000000000081525060128260039080519060200190620000989291906200020c565b508151620000ae9060049060208501906200020c565b506005805460ff191660ff9290921691909117610100600160a81b03191661010033810291909117918290556040516001600160a01b0391909204169250600091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a362000133336b053a680649b3e32378b13f526200013960201b60201c565b620002b1565b6001600160a01b0382166200014d57600080fd5b6200016981600254620001f260201b620008b31790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200019c918390620008b3620001f2821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000828201838110156200020557600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024f57805160ff19168380011785556200027f565b828001600101855582156200027f579182015b828111156200027f57825182559160200191906001019062000262565b506200028d92915062000291565b5090565b620002ae91905b808211156200028d576000815560010162000298565b90565b610b0680620002c16000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063715018a6116100ad578063a457c2d711610071578063a457c2d714610332578063a9059cbb1461035e578063dd62ed3e1461038a578063f0dda65c146103b8578063f2fde38b146103e457610121565b8063715018a6146102ca57806379cc6790146102d25780638da5cb5b146102fe5780638f32d59b1461032257806395d89b411461032a57610121565b80632ff2e9dc116100f45780632ff2e9dc14610233578063313ce5671461023b578063395093511461025957806342966c681461028557806370a08231146102a457610121565b806306fdde0314610126578063095ea7b3146101a357806318160ddd146101e357806323b872dd146101fd575b600080fd5b61012e61040a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610168578181015183820152602001610150565b50505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101cf600480360360408110156101b957600080fd5b506001600160a01b0381351690602001356104a0565b604080519115158252519081900360200190f35b6101eb6104b6565b60408051918252519081900360200190f35b6101cf6004803603606081101561021357600080fd5b506001600160a01b038135811691602081013590911690604001356104bc565b6101eb610513565b610243610523565b6040805160ff9092168252519081900360200190f35b6101cf6004803603604081101561026f57600080fd5b506001600160a01b03813516906020013561052c565b6102a26004803603602081101561029b57600080fd5b5035610568565b005b6101eb600480360360208110156102ba57600080fd5b50356001600160a01b0316610575565b6102a2610590565b6102a2600480360360408110156102e857600080fd5b506001600160a01b0381351690602001356105f1565b6103066105ff565b604080516001600160a01b039092168252519081900360200190f35b6101cf610613565b61012e610629565b6101cf6004803603604081101561034857600080fd5b506001600160a01b03813516906020013561068a565b6101cf6004803603604081101561037457600080fd5b506001600160a01b0381351690602001356106c6565b6101eb600480360360408110156103a057600080fd5b506001600160a01b03813581169160200135166106d3565b6102a2600480360360408110156103ce57600080fd5b506001600160a01b0381351690602001356106fe565b6102a2600480360360208110156103fa57600080fd5b50356001600160a01b0316610731565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104965780601f1061046b57610100808354040283529160200191610496565b820191906000526020600020905b81548152906001019060200180831161047957829003601f168201915b5050505050905090565b60006104ad33848461074b565b50600192915050565b60025490565b60006104c98484846107d3565b6001600160a01b038416600090815260016020908152604080832033808552925290912054610509918691610504908663ffffffff61089e16565b61074b565b5060019392505050565b6b053a680649b3e32378b13f5281565b60055460ff1690565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ad918590610504908663ffffffff6108b316565b61057233826108cc565b50565b6001600160a01b031660009081526020819052604090205490565b610598610613565b6105a157600080fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b6105fb8282610973565b5050565b60055461010090046001600160a01b031690565b60055461010090046001600160a01b0316331490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104965780601f1061046b57610100808354040283529160200191610496565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ad918590610504908663ffffffff61089e16565b60006104ad3384846107d3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610706610613565b61070f57600080fd5b6b053a680649b3e32378b13f52811061072757600080fd5b6105fb82826109b8565b610739610613565b61074257600080fd5b61057281610a60565b6001600160a01b03821661075e57600080fd5b6001600160a01b03831661077157600080fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0382166107e657600080fd5b6001600160a01b03831660009081526020819052604090205461080f908263ffffffff61089e16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610844908263ffffffff6108b316565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828211156108ad57600080fd5b50900390565b6000828201838110156108c557600080fd5b9392505050565b6001600160a01b0382166108df57600080fd5b6002546108f2908263ffffffff61089e16565b6002556001600160a01b03821660009081526020819052604090205461091e908263ffffffff61089e16565b6001600160a01b038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b61097d82826108cc565b6001600160a01b0382166000908152600160209081526040808320338085529252909120546105fb918491610504908563ffffffff61089e16565b6001600160a01b0382166109cb57600080fd5b6002546109de908263ffffffff6108b316565b6002556001600160a01b038216600090815260208190526040902054610a0a908263ffffffff6108b316565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038116610a7357600080fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b031990921691909117905556fea165627a7a723058201690e2d38144f22d5ef41f6df7c31d8a9f0e3d405b358475390221f5547d93010029";

    public static final String FUNC_MINTTOKENSBYPEERS = "mintTokensByPeers";

    public static final String FUNC_XORTOKENINSTANCE = "xorTokenInstance";

    public static final String FUNC_PEERS = "peers";

    public static final String FUNC_UNIQUEADDRESSES = "uniqueAddresses";

    public static final String FUNC_TOKENS = "tokens";

    public static final String FUNC_RELAYREGISTRYADDRESS = "relayRegistryAddress";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_REMOVEPEERBYPEER = "removePeerByPeer";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_CHECKTOKENADDRESS = "checkTokenAddress";

    public static final String FUNC_GETTOKENS = "getTokens";

    public static final String FUNC_PEERSCOUNT = "peersCount";

    public static final String FUNC_USED = "used";

    public static final String FUNC_ADDPEERBYPEER = "addPeerByPeer";

    public static final String FUNC_ADDTOKEN = "addToken";

    public static final String FUNC_OWNER_ = "owner_";

    public static final String FUNC_RELAYREGISTRYINSTANCE = "relayRegistryInstance";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final Event INSUFFICIENTFUNDSFORWITHDRAWAL_EVENT = new Event("InsufficientFundsForWithdrawal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected Master(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Master(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Master(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Master(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> mintTokensByPeers(String beneficiary, BigInteger amount, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
        final Function function = new Function(
                FUNC_MINTTOKENSBYPEERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(beneficiary), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Bytes32(txHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> xorTokenInstance() {
        final Function function = new Function(FUNC_XORTOKENINSTANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> peers(String param0) {
        final Function function = new Function(FUNC_PEERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> uniqueAddresses(String param0) {
        final Function function = new Function(FUNC_UNIQUEADDRESSES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> tokens(BigInteger param0) {
        final Function function = new Function(FUNC_TOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> relayRegistryAddress() {
        final Function function = new Function(FUNC_RELAYREGISTRYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> initialize(String owner, String relayRegistry, List<String> initialPeers) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(relayRegistry), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(initialPeers, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removePeerByPeer(String peerAddress, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
        final Function function = new Function(
                FUNC_REMOVEPEERBYPEER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(peerAddress), 
                new org.web3j.abi.datatypes.generated.Bytes32(txHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isOwner() {
        final Function function = new Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> checkTokenAddress(String tokenAddress) {
        final Function function = new Function(FUNC_CHECKTOKENADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(tokenAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<List> getTokens() {
        final Function function = new Function(FUNC_GETTOKENS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> peersCount() {
        final Function function = new Function(FUNC_PEERSCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> used(byte[] param0) {
        final Function function = new Function(FUNC_USED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> addPeerByPeer(String newPeerAddress, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
        final Function function = new Function(
                FUNC_ADDPEERBYPEER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newPeerAddress), 
                new org.web3j.abi.datatypes.generated.Bytes32(txHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addToken(String newToken) {
        final Function function = new Function(
                FUNC_ADDTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newToken)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner_() {
        final Function function = new Function(FUNC_OWNER_, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> relayRegistryInstance() {
        final Function function = new Function(FUNC_RELAYREGISTRYINSTANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> withdraw(String tokenAddress, BigInteger amount, String to, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s, String from) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(tokenAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Bytes32(txHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.Address(from)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<InsufficientFundsForWithdrawalEventResponse> getInsufficientFundsForWithdrawalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSUFFICIENTFUNDSFORWITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<InsufficientFundsForWithdrawalEventResponse> responses = new ArrayList<InsufficientFundsForWithdrawalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsufficientFundsForWithdrawalEventResponse typedResponse = new InsufficientFundsForWithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.asset = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.recipient = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InsufficientFundsForWithdrawalEventResponse> insufficientFundsForWithdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, InsufficientFundsForWithdrawalEventResponse>() {
            @Override
            public InsufficientFundsForWithdrawalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INSUFFICIENTFUNDSFORWITHDRAWAL_EVENT, log);
                InsufficientFundsForWithdrawalEventResponse typedResponse = new InsufficientFundsForWithdrawalEventResponse();
                typedResponse.log = log;
                typedResponse.asset = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.recipient = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<InsufficientFundsForWithdrawalEventResponse> insufficientFundsForWithdrawalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INSUFFICIENTFUNDSFORWITHDRAWAL_EVENT));
        return insufficientFundsForWithdrawalEventFlowable(filter);
    }

    @Deprecated
    public static Master load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Master(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Master load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Master(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Master load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Master(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Master load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Master(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Master> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String relayRegistry, List<String> initialPeers) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(relayRegistry), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(initialPeers, org.web3j.abi.datatypes.Address.class))));
        return deployRemoteCall(Master.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Master> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String relayRegistry, List<String> initialPeers) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(relayRegistry), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(initialPeers, org.web3j.abi.datatypes.Address.class))));
        return deployRemoteCall(Master.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Master> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String relayRegistry, List<String> initialPeers) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(relayRegistry), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(initialPeers, org.web3j.abi.datatypes.Address.class))));
        return deployRemoteCall(Master.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Master> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String relayRegistry, List<String> initialPeers) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(relayRegistry), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(initialPeers, org.web3j.abi.datatypes.Address.class))));
        return deployRemoteCall(Master.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class InsufficientFundsForWithdrawalEventResponse {
        public Log log;

        public String asset;

        public String recipient;
    }
}
