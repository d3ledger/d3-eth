package contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class Master extends Contract {
    private static final String BINARY = "60806040523480156200001157600080fd5b50604051620039c5380380620039c5833981018060405260408110156200003757600080fd5b8151602083018051919392830192916401000000008111156200005957600080fd5b820160208101848111156200006d57600080fd5b81518560208202830111640100000000821117156200008b57600080fd5b5050929190505050620000a6338383620000ae60201b60201c565b505062000293565b60005460ff1615620000bf57600080fd5b600080546001600160a01b0380861661010002610100600160a81b0319909216919091178255600680548583166001600160a01b0319918216179182905560078054909116919092161790555b81518160ff1610156200014b5762000141828260ff16815181106200012d57fe5b6020026020010151620001eb60201b60201c565b506001016200010c565b506040516200015a9062000285565b604051809103906000f08015801562000177573d6000803e3d6000fd5b50600880546001600160a01b039283166001600160a01b03199182161791829055600980546001818101835560009283527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af909101805490931693909416929092179055805460ff19169091179055505050565b6001600160a01b03811660009081526001602052604081205460ff16156200021257600080fd5b506001600160a01b031660008181526001602081905260408220805460ff19168217905560028054808301825592527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b031916909217909155600380549091019081905590565b610d998062002c2c83390190565b61298980620002a36000396000f3fe6080604052600436106200013a5760003560e01c8063aa6ca80811620000af578063cd559561116200006d578063cd55956114620009ea578063d48bfca71462000a02578063e76630791462000a39578063e991232b1462000a51578063eea29e3e1462000a69576200013a565b8063aa6ca8081462000726578063ae6664e01462000790578063b07c411f14620007ba578063be4f3e8f14620007e8578063ca70cf6e1462000816576200013a565b806377a24f3611620000fd57806377a24f36146200024457806378749620146200031257806389c39baf14620005035780638f32d59b14620006d75780639f1a156c14620006ef576200013a565b80631b042ef914620001485780631d345ebb146200017c5780633e44cf7814620001c75780634f64b2be14620001fe578063658afed4146200022c575b36156200014657600080fd5b005b3480156200015557600080fd5b506200016062000c5a565b604080516001600160a01b039092168252519081900360200190f35b3480156200018957600080fd5b50620001b360048036036020811015620001a257600080fd5b50356001600160a01b031662000c69565b604080519115158252519081900360200190f35b348015620001d457600080fd5b50620001b360048036036020811015620001ed57600080fd5b50356001600160a01b031662000c7e565b3480156200020b57600080fd5b5062000160600480360360208110156200022457600080fd5b503562000c93565b3480156200023957600080fd5b506200016062000cbb565b3480156200025157600080fd5b5062000146600480360360608110156200026a57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156200029e57600080fd5b820183602082011115620002b157600080fd5b803590602001918460208302840111600160201b83111715620002d357600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062000cca945050505050565b3480156200031f57600080fd5b506200014660048036036101008110156200033957600080fd5b6001600160a01b0382358116926020810135926040820135909216916060820135919081019060a081016080820135600160201b8111156200037a57600080fd5b8201836020820111156200038d57600080fd5b803590602001918460208302840111600160201b83111715620003af57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115620003ff57600080fd5b8201836020820111156200041257600080fd5b803590602001918460208302840111600160201b831117156200043457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200048457600080fd5b8201836020820111156200049757600080fd5b803590602001918460208302840111600160201b83111715620004b957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b0316915062000e019050565b3480156200051057600080fd5b50620001b3600480360360a08110156200052957600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156200055957600080fd5b8201836020820111156200056c57600080fd5b803590602001918460208302840111600160201b831117156200058e57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115620005de57600080fd5b820183602082011115620005f157600080fd5b803590602001918460208302840111600160201b831117156200061357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200066357600080fd5b8201836020820111156200067657600080fd5b803590602001918460208302840111600160201b831117156200069857600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062000fcd945050505050565b348015620006e457600080fd5b50620001b362001076565b348015620006fc57600080fd5b50620001b3600480360360208110156200071557600080fd5b50356001600160a01b03166200108d565b3480156200073357600080fd5b506200073e62001106565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156200077c57818101518382015260200162000762565b505050509050019250505060405180910390f35b3480156200079d57600080fd5b50620007a86200116a565b60408051918252519081900360200190f35b348015620007c757600080fd5b50620001b360048036036020811015620007e057600080fd5b503562001170565b348015620007f557600080fd5b5062000160600480360360208110156200080e57600080fd5b503562001185565b3480156200082357600080fd5b50620001b3600480360360a08110156200083c57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156200086c57600080fd5b8201836020820111156200087f57600080fd5b803590602001918460208302840111600160201b83111715620008a157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115620008f157600080fd5b8201836020820111156200090457600080fd5b803590602001918460208302840111600160201b831117156200092657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200097657600080fd5b8201836020820111156200098957600080fd5b803590602001918460208302840111600160201b83111715620009ab57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062001193945050505050565b348015620009f757600080fd5b506200073e6200123d565b34801562000a0f57600080fd5b50620001466004803603602081101562000a2857600080fd5b50356001600160a01b03166200129f565b34801562000a4657600080fd5b506200016062001356565b34801562000a5e57600080fd5b50620001606200136a565b34801562000a7657600080fd5b5062000146600480360361010081101562000a9057600080fd5b6001600160a01b0382358116926020810135926040820135909216916060820135919081019060a081016080820135600160201b81111562000ad157600080fd5b82018360208201111562000ae457600080fd5b803590602001918460208302840111600160201b8311171562000b0657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000b5657600080fd5b82018360208201111562000b6957600080fd5b803590602001918460208302840111600160201b8311171562000b8b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000bdb57600080fd5b82018360208201111562000bee57600080fd5b803590602001918460208302840111600160201b8311171562000c1057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b03169150620013799050565b6008546001600160a01b031681565b60056020526000908152604090205460ff1681565b60016020526000908152604090205460ff1681565b6009818154811062000ca157fe5b6000918252602090912001546001600160a01b0316905081565b6006546001600160a01b031681565b60005460ff161562000cdb57600080fd5b600080546001600160a01b0380861661010002610100600160a81b0319909216919091178255600680548583166001600160a01b0319918216179182905560078054909116919092161790555b81518160ff16101562000d615762000d57828260ff168151811062000d4957fe5b6020026020010151620016dd565b5060010162000d28565b5060405162000d709062001b69565b604051809103906000f08015801562000d8d573d6000803e3d6000fd5b50600880546001600160a01b039283166001600160a01b03199182161791829055600980546001818101835560009283527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af909101805490931693909416929092179055805460ff19169091179055505050565b6008546001600160a01b0389811691161462000e1c57600080fd5b60075460408051600160e01b63a10cda990281526001600160a01b03848116600483015289811660248301529151919092169163a10cda99916044808301926020929190829003018186803b15801562000e7557600080fd5b505afa15801562000e8a573d6000803e3d6000fd5b505050506040513d602081101562000ea157600080fd5b505162000ead57600080fd5b60008581526004602052604090205460ff161562000eca57600080fd5b604080516001600160a01b03808b16606090811b602080850191909152603484018c9052828b16821b6054850152606884018a9052918516901b60888301528251607c818403018152609c909201909252805191012062000f2e9085858562001777565b62000f3857600080fd5b60085460408051600160e21b633c3769970281526001600160a01b038981166004830152602482018b90529151919092169163f0dda65c91604480830192600092919082900301818387803b15801562000f9157600080fd5b505af115801562000fa6573d6000803e3d6000fd5b50505060009586525050600460205250506040909120805460ff1916600117905550505050565b60008481526004602052604081205460ff161562000fea57600080fd5b6200103b868660405160200180836001600160a01b03166001600160a01b031660601b8152601401828152602001925050506040516020818303038152906040528051906020012085858562001777565b6200104557600080fd5b620010508662001979565b506000848152600460205260409020805460ff1916600190811790915595945050505050565b60005461010090046001600160a01b031633145b90565b60006001600160a01b038216620010a75750600162001101565b6000805b600954811015620010fd57836001600160a01b031660098281548110620010ce57fe5b6000918252602090912001546001600160a01b03161415620010f45760019150620010fd565b600101620010ab565b5090505b919050565b606060098054806020026020016040519081016040528092919081815260200182805480156200116057602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001141575b5050505050905090565b60035481565b60046020526000908152604090205460ff1681565b6002818154811062000ca157fe5b60008481526004602052604081205460ff1615620011b057600080fd5b62001201868660405160200180836001600160a01b03166001600160a01b031660601b8152601401828152602001925050506040516020818303038152906040528051906020012085858562001777565b6200120b57600080fd5b6200121686620016dd565b50506000848152600460205260409020805460ff1916600190811790915595945050505050565b6060600280548060200260200160405190810160405280929190818152602001828054801562001160576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162001141575050505050905090565b620012a962001076565b620012b357600080fd5b60005b6009548110156200130357816001600160a01b031660098281548110620012d957fe5b6000918252602090912001546001600160a01b03161415620012fa57600080fd5b600101620012b6565b50600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b0392909216919091179055565b60005461010090046001600160a01b031681565b6007546001600160a01b031681565b62001384886200108d565b6200138e57600080fd5b60075460408051600160e01b63a10cda990281526001600160a01b03848116600483015289811660248301529151919092169163a10cda99916044808301926020929190829003018186803b158015620013e757600080fd5b505afa158015620013fc573d6000803e3d6000fd5b505050506040513d60208110156200141357600080fd5b50516200141f57600080fd5b60008581526004602052604090205460ff16156200143c57600080fd5b604080516001600160a01b03808b16606090811b602080850191909152603484018c9052828b16821b6054850152606884018a9052918516901b60888301528251607c818403018152609c9092019092528051910120620014a09085858562001777565b620014aa57600080fd5b6001600160a01b038816620015635730318711156200150e57604080516001600160a01b03808b1682528816602082015281517f33d1e0301846de1496df73b1da3d17c85b7266dd832d21e10ff21a1f143ef293929181900390910190a16200155d565b600085815260046020526040808220805460ff19166001179055516001600160a01b0388169189156108fc02918a91818181858888f193505050501580156200155b573d6000803e3d6000fd5b505b620016d3565b60408051600160e01b6370a082310281523060048201529051899189916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015620015b157600080fd5b505afa158015620015c6573d6000803e3d6000fd5b505050506040513d6020811015620015dd57600080fd5b505110156200163157604080516001600160a01b03808c1682528916602082015281517f33d1e0301846de1496df73b1da3d17c85b7266dd832d21e10ff21a1f143ef293929181900390910190a1620016d1565b6000868152600460208181526040808420805460ff191660011790558051600160e01b63a9059cbb0281526001600160a01b038c811694820194909452602481018d905290519285169363a9059cbb93604480840194939192918390030190829087803b158015620016a257600080fd5b505af1158015620016b7573d6000803e3d6000fd5b505050506040513d6020811015620016ce57600080fd5b50505b505b5050505050505050565b6001600160a01b03811660009081526001602052604081205460ff16156200170457600080fd5b506001600160a01b031660008181526001602081905260408220805460ff19168217905560028054808301825592527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b031916909217909155600380549091019081905590565b6000600160035410156200178a57600080fd5b82518451146200179957600080fd5b8151835114620017a857600080fd5b6000600360016003540381620017ba57fe5b046003540390508083511015620017d057600080fd5b60008090506060845160405190808252806020026020018201604052801562001803578160200160208202803883390190505b50905060005b8551811015620019115760006200185f8a8a84815181106200182757fe5b60200260200101518a85815181106200183c57fe5b60200260200101518a86815181106200185157fe5b602002602001015162001a9f565b6001600160a01b03811660009081526001602081905260409091205491925060ff9091161515141580620018b057506001600160a01b03811660009081526005602052604090205460ff1615156001145b15620018bd575062001908565b80838581518110620018cb57fe5b6001600160a01b0392831660209182029290920181019190915291166000908152600590915260409020805460ff19166001908117909155909201915b60010162001809565b5060005b828110156200196c576000600560008484815181106200193157fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010162001915565b5050101595945050505050565b6001600160a01b03811660009081526001602081905260409091205460ff16151514620019a557600080fd5b6001600160a01b0381166000908152600160205260408120805460ff191690555b60025460ff8216101562001a9157816001600160a01b031660028260ff1681548110620019ef57fe5b6000918252602090912001546001600160a01b0316141562001a885760028054600019810190811062001a1e57fe5b600091825260209091200154600280546001600160a01b039092169160ff841690811062001a4857fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600280549062001a8690600019830162001b77565b505b600101620019c6565b505060038054600019019055565b6000808560405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050600060018287878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801562001b53573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b610d998062001bc583390190565b81548183558181111562001b9e5760008381526020902062001b9e91810190830162001ba3565b505050565b6200108a91905b8082111562001bc0576000815560010162001baa565b509056fe60806040523480156200001157600080fd5b506040518060400160405280600a81526020017f536f726120546f6b656e000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f584f520000000000000000000000000000000000000000000000000000000000815250601282600390805190602001906200009892919062000201565b508151620000ae90600490602085019062000201565b506005805460ff191660ff9290921691909117610100600160a81b03191661010033810291909117918290556040516001600160a01b0391909204169250600091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620001283360006200012e60201b60201c565b620002a6565b6001600160a01b0382166200014257600080fd5b6200015e81600254620001e760201b620008901790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200019191839062000890620001e7821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600082820183811015620001fa57600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024457805160ff191683800117855562000274565b8280016001018555821562000274579182015b828111156200027457825182559160200191906001019062000257565b506200028292915062000286565b5090565b620002a391905b808211156200028257600081556001016200028d565b90565b610ae380620002b66000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063715018a6116100ad578063a457c2d711610071578063a457c2d714610332578063a9059cbb1461035e578063dd62ed3e1461038a578063f0dda65c146103b8578063f2fde38b146103e457610121565b8063715018a6146102ca57806379cc6790146102d25780638da5cb5b146102fe5780638f32d59b1461032257806395d89b411461032a57610121565b80632ff2e9dc116100f45780632ff2e9dc14610233578063313ce5671461023b578063395093511461025957806342966c681461028557806370a08231146102a457610121565b806306fdde0314610126578063095ea7b3146101a357806318160ddd146101e357806323b872dd146101fd575b600080fd5b61012e61040a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610168578181015183820152602001610150565b50505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101cf600480360360408110156101b957600080fd5b506001600160a01b0381351690602001356104a0565b604080519115158252519081900360200190f35b6101eb6104b6565b60408051918252519081900360200190f35b6101cf6004803603606081101561021357600080fd5b506001600160a01b038135811691602081013590911690604001356104bc565b6101eb610513565b610243610518565b6040805160ff9092168252519081900360200190f35b6101cf6004803603604081101561026f57600080fd5b506001600160a01b038135169060200135610521565b6102a26004803603602081101561029b57600080fd5b503561055d565b005b6101eb600480360360208110156102ba57600080fd5b50356001600160a01b031661056a565b6102a2610585565b6102a2600480360360408110156102e857600080fd5b506001600160a01b0381351690602001356105e6565b6103066105f4565b604080516001600160a01b039092168252519081900360200190f35b6101cf610608565b61012e61061e565b6101cf6004803603604081101561034857600080fd5b506001600160a01b03813516906020013561067f565b6101cf6004803603604081101561037457600080fd5b506001600160a01b0381351690602001356106bb565b6101eb600480360360408110156103a057600080fd5b506001600160a01b03813581169160200135166106c8565b6102a2600480360360408110156103ce57600080fd5b506001600160a01b0381351690602001356106f3565b6102a2600480360360208110156103fa57600080fd5b50356001600160a01b031661070e565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104965780601f1061046b57610100808354040283529160200191610496565b820191906000526020600020905b81548152906001019060200180831161047957829003601f168201915b5050505050905090565b60006104ad338484610728565b50600192915050565b60025490565b60006104c98484846107b0565b6001600160a01b038416600090815260016020908152604080832033808552925290912054610509918691610504908663ffffffff61087b16565b610728565b5060019392505050565b600081565b60055460ff1690565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ad918590610504908663ffffffff61089016565b61056733826108a9565b50565b6001600160a01b031660009081526020819052604090205490565b61058d610608565b61059657600080fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b6105f08282610950565b5050565b60055461010090046001600160a01b031690565b60055461010090046001600160a01b0316331490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104965780601f1061046b57610100808354040283529160200191610496565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ad918590610504908663ffffffff61087b16565b60006104ad3384846107b0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6106fb610608565b61070457600080fd5b6105f08282610995565b610716610608565b61071f57600080fd5b61056781610a3d565b6001600160a01b03821661073b57600080fd5b6001600160a01b03831661074e57600080fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0382166107c357600080fd5b6001600160a01b0383166000908152602081905260409020546107ec908263ffffffff61087b16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610821908263ffffffff61089016565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282111561088a57600080fd5b50900390565b6000828201838110156108a257600080fd5b9392505050565b6001600160a01b0382166108bc57600080fd5b6002546108cf908263ffffffff61087b16565b6002556001600160a01b0382166000908152602081905260409020546108fb908263ffffffff61087b16565b6001600160a01b038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b61095a82826108a9565b6001600160a01b0382166000908152600160209081526040808320338085529252909120546105f0918491610504908563ffffffff61087b16565b6001600160a01b0382166109a857600080fd5b6002546109bb908263ffffffff61089016565b6002556001600160a01b0382166000908152602081905260409020546109e7908263ffffffff61089016565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038116610a5057600080fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b031990921691909117905556fea165627a7a723058200c8cafeefe672e96837fd108021caed2d20814ae0211559adc9671806dc0e7540029a165627a7a723058203ed12205cfdaeedec2fc4ee59d59d2daa0303d107aac8d62454517ad85afe654002960806040523480156200001157600080fd5b506040518060400160405280600a81526020017f536f726120546f6b656e000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f584f520000000000000000000000000000000000000000000000000000000000815250601282600390805190602001906200009892919062000201565b508151620000ae90600490602085019062000201565b506005805460ff191660ff9290921691909117610100600160a81b03191661010033810291909117918290556040516001600160a01b0391909204169250600091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620001283360006200012e60201b60201c565b620002a6565b6001600160a01b0382166200014257600080fd5b6200015e81600254620001e760201b620008901790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200019191839062000890620001e7821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600082820183811015620001fa57600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024457805160ff191683800117855562000274565b8280016001018555821562000274579182015b828111156200027457825182559160200191906001019062000257565b506200028292915062000286565b5090565b620002a391905b808211156200028257600081556001016200028d565b90565b610ae380620002b66000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063715018a6116100ad578063a457c2d711610071578063a457c2d714610332578063a9059cbb1461035e578063dd62ed3e1461038a578063f0dda65c146103b8578063f2fde38b146103e457610121565b8063715018a6146102ca57806379cc6790146102d25780638da5cb5b146102fe5780638f32d59b1461032257806395d89b411461032a57610121565b80632ff2e9dc116100f45780632ff2e9dc14610233578063313ce5671461023b578063395093511461025957806342966c681461028557806370a08231146102a457610121565b806306fdde0314610126578063095ea7b3146101a357806318160ddd146101e357806323b872dd146101fd575b600080fd5b61012e61040a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610168578181015183820152602001610150565b50505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101cf600480360360408110156101b957600080fd5b506001600160a01b0381351690602001356104a0565b604080519115158252519081900360200190f35b6101eb6104b6565b60408051918252519081900360200190f35b6101cf6004803603606081101561021357600080fd5b506001600160a01b038135811691602081013590911690604001356104bc565b6101eb610513565b610243610518565b6040805160ff9092168252519081900360200190f35b6101cf6004803603604081101561026f57600080fd5b506001600160a01b038135169060200135610521565b6102a26004803603602081101561029b57600080fd5b503561055d565b005b6101eb600480360360208110156102ba57600080fd5b50356001600160a01b031661056a565b6102a2610585565b6102a2600480360360408110156102e857600080fd5b506001600160a01b0381351690602001356105e6565b6103066105f4565b604080516001600160a01b039092168252519081900360200190f35b6101cf610608565b61012e61061e565b6101cf6004803603604081101561034857600080fd5b506001600160a01b03813516906020013561067f565b6101cf6004803603604081101561037457600080fd5b506001600160a01b0381351690602001356106bb565b6101eb600480360360408110156103a057600080fd5b506001600160a01b03813581169160200135166106c8565b6102a2600480360360408110156103ce57600080fd5b506001600160a01b0381351690602001356106f3565b6102a2600480360360208110156103fa57600080fd5b50356001600160a01b031661070e565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104965780601f1061046b57610100808354040283529160200191610496565b820191906000526020600020905b81548152906001019060200180831161047957829003601f168201915b5050505050905090565b60006104ad338484610728565b50600192915050565b60025490565b60006104c98484846107b0565b6001600160a01b038416600090815260016020908152604080832033808552925290912054610509918691610504908663ffffffff61087b16565b610728565b5060019392505050565b600081565b60055460ff1690565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ad918590610504908663ffffffff61089016565b61056733826108a9565b50565b6001600160a01b031660009081526020819052604090205490565b61058d610608565b61059657600080fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b6105f08282610950565b5050565b60055461010090046001600160a01b031690565b60055461010090046001600160a01b0316331490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104965780601f1061046b57610100808354040283529160200191610496565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ad918590610504908663ffffffff61087b16565b60006104ad3384846107b0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6106fb610608565b61070457600080fd5b6105f08282610995565b610716610608565b61071f57600080fd5b61056781610a3d565b6001600160a01b03821661073b57600080fd5b6001600160a01b03831661074e57600080fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0382166107c357600080fd5b6001600160a01b0383166000908152602081905260409020546107ec908263ffffffff61087b16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610821908263ffffffff61089016565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282111561088a57600080fd5b50900390565b6000828201838110156108a257600080fd5b9392505050565b6001600160a01b0382166108bc57600080fd5b6002546108cf908263ffffffff61087b16565b6002556001600160a01b0382166000908152602081905260409020546108fb908263ffffffff61087b16565b6001600160a01b038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b61095a82826108a9565b6001600160a01b0382166000908152600160209081526040808320338085529252909120546105f0918491610504908563ffffffff61087b16565b6001600160a01b0382166109a857600080fd5b6002546109bb908263ffffffff61089016565b6002556001600160a01b0382166000908152602081905260409020546109e7908263ffffffff61089016565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038116610a5057600080fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b031990921691909117905556fea165627a7a723058200c8cafeefe672e96837fd108021caed2d20814ae0211559adc9671806dc0e7540029";

    public static final String FUNC_XORTOKENINSTANCE = "xorTokenInstance";

    public static final String FUNC_UNIQUEADDRESSES = "uniqueAddresses";

    public static final String FUNC_ISPEER = "isPeer";

    public static final String FUNC_TOKENS = "tokens";

    public static final String FUNC_RELAYREGISTRYADDRESS = "relayRegistryAddress";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_MINTTOKENSBYPEERS = "mintTokensByPeers";

    public static final String FUNC_REMOVEPEERBYPEER = "removePeerByPeer";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_CHECKTOKENADDRESS = "checkTokenAddress";

    public static final String FUNC_GETTOKENS = "getTokens";

    public static final String FUNC_PEERSCOUNT = "peersCount";

    public static final String FUNC_USED = "used";

    public static final String FUNC_PEERS = "peers";

    public static final String FUNC_ADDPEERBYPEER = "addPeerByPeer";

    public static final String FUNC_GETPEERS = "getPeers";

    public static final String FUNC_ADDTOKEN = "addToken";

    public static final String FUNC_OWNER_ = "owner_";

    public static final String FUNC_RELAYREGISTRYINSTANCE = "relayRegistryInstance";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final Event INSUFFICIENTFUNDSFORWITHDRAWAL_EVENT = new Event("InsufficientFundsForWithdrawal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected Master(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Master(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Master(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Master(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> xorTokenInstance() {
        final Function function = new Function(FUNC_XORTOKENINSTANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> uniqueAddresses(String param0) {
        final Function function = new Function(FUNC_UNIQUEADDRESSES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> isPeer(String param0) {
        final Function function = new Function(FUNC_ISPEER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> tokens(BigInteger param0) {
        final Function function = new Function(FUNC_TOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> relayRegistryAddress() {
        final Function function = new Function(FUNC_RELAYREGISTRYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> initialize(String owner, String relayRegistry, List<String> initialPeers) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(relayRegistry), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(initialPeers, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mintTokensByPeers(String tokenAddress, BigInteger amount, String beneficiary, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s, String from) {
        final Function function = new Function(
                FUNC_MINTTOKENSBYPEERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(tokenAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Address(beneficiary), 
                new org.web3j.abi.datatypes.generated.Bytes32(txHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.Address(from)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removePeerByPeer(String peerAddress, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
        final Function function = new Function(
                FUNC_REMOVEPEERBYPEER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(peerAddress), 
                new org.web3j.abi.datatypes.generated.Bytes32(txHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isOwner() {
        final Function function = new Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> checkTokenAddress(String tokenAddress) {
        final Function function = new Function(FUNC_CHECKTOKENADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(tokenAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<List> getTokens() {
        final Function function = new Function(FUNC_GETTOKENS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> peersCount() {
        final Function function = new Function(FUNC_PEERSCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> used(byte[] param0) {
        final Function function = new Function(FUNC_USED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> peers(BigInteger param0) {
        final Function function = new Function(FUNC_PEERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addPeerByPeer(String newPeerAddress, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
        final Function function = new Function(
                FUNC_ADDPEERBYPEER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newPeerAddress), 
                new org.web3j.abi.datatypes.generated.Bytes32(txHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getPeers() {
        final Function function = new Function(FUNC_GETPEERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addToken(String newToken) {
        final Function function = new Function(
                FUNC_ADDTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newToken)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner_() {
        final Function function = new Function(FUNC_OWNER_, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> relayRegistryInstance() {
        final Function function = new Function(FUNC_RELAYREGISTRYINSTANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> withdraw(String tokenAddress, BigInteger amount, String to, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s, String from) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(tokenAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Bytes32(txHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.Address(from)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<InsufficientFundsForWithdrawalEventResponse> getInsufficientFundsForWithdrawalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSUFFICIENTFUNDSFORWITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<InsufficientFundsForWithdrawalEventResponse> responses = new ArrayList<InsufficientFundsForWithdrawalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsufficientFundsForWithdrawalEventResponse typedResponse = new InsufficientFundsForWithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.asset = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.recipient = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InsufficientFundsForWithdrawalEventResponse> insufficientFundsForWithdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, InsufficientFundsForWithdrawalEventResponse>() {
            @Override
            public InsufficientFundsForWithdrawalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INSUFFICIENTFUNDSFORWITHDRAWAL_EVENT, log);
                InsufficientFundsForWithdrawalEventResponse typedResponse = new InsufficientFundsForWithdrawalEventResponse();
                typedResponse.log = log;
                typedResponse.asset = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.recipient = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<InsufficientFundsForWithdrawalEventResponse> insufficientFundsForWithdrawalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INSUFFICIENTFUNDSFORWITHDRAWAL_EVENT));
        return insufficientFundsForWithdrawalEventFlowable(filter);
    }

    @Deprecated
    public static Master load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Master(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Master load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Master(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Master load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Master(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Master load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Master(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Master> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String relayRegistry, List<String> initialPeers) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(relayRegistry), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(initialPeers, org.web3j.abi.datatypes.Address.class))));
        return deployRemoteCall(Master.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Master> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String relayRegistry, List<String> initialPeers) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(relayRegistry), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(initialPeers, org.web3j.abi.datatypes.Address.class))));
        return deployRemoteCall(Master.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Master> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String relayRegistry, List<String> initialPeers) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(relayRegistry), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(initialPeers, org.web3j.abi.datatypes.Address.class))));
        return deployRemoteCall(Master.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Master> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String relayRegistry, List<String> initialPeers) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(relayRegistry), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(initialPeers, org.web3j.abi.datatypes.Address.class))));
        return deployRemoteCall(Master.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class InsufficientFundsForWithdrawalEventResponse {
        public Log log;

        public String asset;

        public String recipient;
    }
}
